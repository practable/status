// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new operations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for operations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	Allow(params *AllowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowNoContent, error)

	Deny(params *DenyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DenyNoContent, error)

	ListAllowed(params *ListAllowedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllowedOK, error)

	ListDenied(params *ListDeniedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeniedOK, error)

	Session(params *SessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SessionOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Allow undos the denial of a booking id

  Undo the denial of a booking id
*/
func (a *Client) Allow(params *AllowParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*AllowNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAllowParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "allow",
		Method:             "POST",
		PathPattern:        "/bids/allow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &AllowReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*AllowNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for allow: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Deny refuses sessions to new connections using tokens with the bid s booking ids and disconnect any current sessions immediately

  Refuse sessions to new connections using tokens with the bid (booking id), and disconnect any current sessions immediately. The exp term is the unix time in UTC when the booking finishes (i.e. the earliest time it is safe to remove the bid from the deny list)
*/
func (a *Client) Deny(params *DenyParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DenyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDenyParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deny",
		Method:             "POST",
		PathPattern:        "/bids/deny",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &DenyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DenyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deny: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListAllowed gets a list of all currently allowed bids

  Get a list of all currently-allowed bids (booking ids) with an ongoing or recent live connection
*/
func (a *Client) ListAllowed(params *ListAllowedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListAllowedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListAllowedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listAllowed",
		Method:             "GET",
		PathPattern:        "/bids/allow",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListAllowedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListAllowedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listAllowed: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  ListDenied gets a list of all currently denied bids

  Get a list of all currently-denied bids
*/
func (a *Client) ListDenied(params *ListDeniedParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListDeniedOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDeniedParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listDenied",
		Method:             "GET",
		PathPattern:        "/bids/deny",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &ListDeniedReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListDeniedOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for listDenied: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  Session sessions

  access the specified session
*/
func (a *Client) Session(params *SessionParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*SessionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSessionParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "session",
		Method:             "POST",
		PathPattern:        "/session/{session_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SessionReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SessionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for session: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
