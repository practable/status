// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/practable/status/internal/relay/models"
)

// AllowReader is a Reader for the Allow structure.
type AllowReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *AllowReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewAllowNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewAllowBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewAllowUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewAllowNoContent creates a AllowNoContent with default headers values
func NewAllowNoContent() *AllowNoContent {
	return &AllowNoContent{}
}

/* AllowNoContent describes a response with status code 204, with default header values.

The bid was allowed successfully.
*/
type AllowNoContent struct {
}

// IsSuccess returns true when this allow no content response has a 2xx status code
func (o *AllowNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this allow no content response has a 3xx status code
func (o *AllowNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this allow no content response has a 4xx status code
func (o *AllowNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this allow no content response has a 5xx status code
func (o *AllowNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this allow no content response a status code equal to that given
func (o *AllowNoContent) IsCode(code int) bool {
	return code == 204
}

func (o *AllowNoContent) Error() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowNoContent ", 204)
}

func (o *AllowNoContent) String() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowNoContent ", 204)
}

func (o *AllowNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewAllowBadRequest creates a AllowBadRequest with default headers values
func NewAllowBadRequest() *AllowBadRequest {
	return &AllowBadRequest{}
}

/* AllowBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type AllowBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this allow bad request response has a 2xx status code
func (o *AllowBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this allow bad request response has a 3xx status code
func (o *AllowBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this allow bad request response has a 4xx status code
func (o *AllowBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this allow bad request response has a 5xx status code
func (o *AllowBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this allow bad request response a status code equal to that given
func (o *AllowBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *AllowBadRequest) Error() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowBadRequest  %+v", 400, o.Payload)
}

func (o *AllowBadRequest) String() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowBadRequest  %+v", 400, o.Payload)
}

func (o *AllowBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllowBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewAllowUnauthorized creates a AllowUnauthorized with default headers values
func NewAllowUnauthorized() *AllowUnauthorized {
	return &AllowUnauthorized{}
}

/* AllowUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type AllowUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this allow unauthorized response has a 2xx status code
func (o *AllowUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this allow unauthorized response has a 3xx status code
func (o *AllowUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this allow unauthorized response has a 4xx status code
func (o *AllowUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this allow unauthorized response has a 5xx status code
func (o *AllowUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this allow unauthorized response a status code equal to that given
func (o *AllowUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *AllowUnauthorized) Error() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowUnauthorized  %+v", 401, o.Payload)
}

func (o *AllowUnauthorized) String() string {
	return fmt.Sprintf("[POST /bids/allow][%d] allowUnauthorized  %+v", 401, o.Payload)
}

func (o *AllowUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *AllowUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
