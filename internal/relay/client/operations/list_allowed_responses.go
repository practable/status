// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/practable/status/internal/relay/models"
)

// ListAllowedReader is a Reader for the ListAllowed structure.
type ListAllowedReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAllowedReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAllowedOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewListAllowedUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewListAllowedOK creates a ListAllowedOK with default headers values
func NewListAllowedOK() *ListAllowedOK {
	return &ListAllowedOK{}
}

/* ListAllowedOK describes a response with status code 200, with default header values.

Current or recently in-use allowed bids
*/
type ListAllowedOK struct {
	Payload *models.BookingIDs
}

// IsSuccess returns true when this list allowed o k response has a 2xx status code
func (o *ListAllowedOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list allowed o k response has a 3xx status code
func (o *ListAllowedOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list allowed o k response has a 4xx status code
func (o *ListAllowedOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list allowed o k response has a 5xx status code
func (o *ListAllowedOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list allowed o k response a status code equal to that given
func (o *ListAllowedOK) IsCode(code int) bool {
	return code == 200
}

func (o *ListAllowedOK) Error() string {
	return fmt.Sprintf("[GET /bids/allow][%d] listAllowedOK  %+v", 200, o.Payload)
}

func (o *ListAllowedOK) String() string {
	return fmt.Sprintf("[GET /bids/allow][%d] listAllowedOK  %+v", 200, o.Payload)
}

func (o *ListAllowedOK) GetPayload() *models.BookingIDs {
	return o.Payload
}

func (o *ListAllowedOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.BookingIDs)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAllowedUnauthorized creates a ListAllowedUnauthorized with default headers values
func NewListAllowedUnauthorized() *ListAllowedUnauthorized {
	return &ListAllowedUnauthorized{}
}

/* ListAllowedUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type ListAllowedUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this list allowed unauthorized response has a 2xx status code
func (o *ListAllowedUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list allowed unauthorized response has a 3xx status code
func (o *ListAllowedUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list allowed unauthorized response has a 4xx status code
func (o *ListAllowedUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this list allowed unauthorized response has a 5xx status code
func (o *ListAllowedUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this list allowed unauthorized response a status code equal to that given
func (o *ListAllowedUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *ListAllowedUnauthorized) Error() string {
	return fmt.Sprintf("[GET /bids/allow][%d] listAllowedUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAllowedUnauthorized) String() string {
	return fmt.Sprintf("[GET /bids/allow][%d] listAllowedUnauthorized  %+v", 401, o.Payload)
}

func (o *ListAllowedUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *ListAllowedUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
