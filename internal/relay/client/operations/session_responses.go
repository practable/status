// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/practable/status/internal/relay/models"
)

// SessionReader is a Reader for the Session structure.
type SessionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SessionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSessionOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewSessionBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 401:
		result := NewSessionUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("response status code does not match any response statuses defined for this endpoint in the swagger spec", response, response.Code())
	}
}

// NewSessionOK creates a SessionOK with default headers values
func NewSessionOK() *SessionOK {
	return &SessionOK{}
}

/* SessionOK describes a response with status code 200, with default header values.

SessionOK session o k
*/
type SessionOK struct {
	Payload *SessionOKBody
}

// IsSuccess returns true when this session o k response has a 2xx status code
func (o *SessionOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this session o k response has a 3xx status code
func (o *SessionOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this session o k response has a 4xx status code
func (o *SessionOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this session o k response has a 5xx status code
func (o *SessionOK) IsServerError() bool {
	return false
}

// IsCode returns true when this session o k response a status code equal to that given
func (o *SessionOK) IsCode(code int) bool {
	return code == 200
}

func (o *SessionOK) Error() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionOK  %+v", 200, o.Payload)
}

func (o *SessionOK) String() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionOK  %+v", 200, o.Payload)
}

func (o *SessionOK) GetPayload() *SessionOKBody {
	return o.Payload
}

func (o *SessionOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SessionOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionBadRequest creates a SessionBadRequest with default headers values
func NewSessionBadRequest() *SessionBadRequest {
	return &SessionBadRequest{}
}

/* SessionBadRequest describes a response with status code 400, with default header values.

BadRequest
*/
type SessionBadRequest struct {
	Payload *models.Error
}

// IsSuccess returns true when this session bad request response has a 2xx status code
func (o *SessionBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this session bad request response has a 3xx status code
func (o *SessionBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this session bad request response has a 4xx status code
func (o *SessionBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this session bad request response has a 5xx status code
func (o *SessionBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this session bad request response a status code equal to that given
func (o *SessionBadRequest) IsCode(code int) bool {
	return code == 400
}

func (o *SessionBadRequest) Error() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionBadRequest  %+v", 400, o.Payload)
}

func (o *SessionBadRequest) String() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionBadRequest  %+v", 400, o.Payload)
}

func (o *SessionBadRequest) GetPayload() *models.Error {
	return o.Payload
}

func (o *SessionBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSessionUnauthorized creates a SessionUnauthorized with default headers values
func NewSessionUnauthorized() *SessionUnauthorized {
	return &SessionUnauthorized{}
}

/* SessionUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type SessionUnauthorized struct {
	Payload interface{}
}

// IsSuccess returns true when this session unauthorized response has a 2xx status code
func (o *SessionUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this session unauthorized response has a 3xx status code
func (o *SessionUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this session unauthorized response has a 4xx status code
func (o *SessionUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this session unauthorized response has a 5xx status code
func (o *SessionUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this session unauthorized response a status code equal to that given
func (o *SessionUnauthorized) IsCode(code int) bool {
	return code == 401
}

func (o *SessionUnauthorized) Error() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionUnauthorized  %+v", 401, o.Payload)
}

func (o *SessionUnauthorized) String() string {
	return fmt.Sprintf("[POST /session/{session_id}][%d] sessionUnauthorized  %+v", 401, o.Payload)
}

func (o *SessionUnauthorized) GetPayload() interface{} {
	return o.Payload
}

func (o *SessionUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SessionOKBody session o k body
swagger:model SessionOKBody
*/
type SessionOKBody struct {

	// uri
	URI string `json:"uri,omitempty"`
}

// Validate validates this session o k body
func (o *SessionOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this session o k body based on context it is used
func (o *SessionOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SessionOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SessionOKBody) UnmarshalBinary(b []byte) error {
	var res SessionOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
