// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ExperimentStatus Status of an experiment
//
// swagger:model ExperimentStatus
type ExperimentStatus struct {

	// the ip address
	// Required: true
	Address *string `json:"address"`

	// book
	Book *BookStatus `json:"book,omitempty"`

	// jump
	// Required: true
	Jump *JumpStatus `json:"jump"`

	// name of the experiment
	// Example: spin30
	// Required: true
	Name *string `json:"name"`

	// relay
	// Required: true
	Relay []*StreamStatus `json:"relay"`

	// test
	Test *TestStatus `json:"test,omitempty"`
}

// Validate validates this experiment status
func (m *ExperimentStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBook(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateJump(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRelay(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentStatus) validateAddress(formats strfmt.Registry) error {

	if err := validate.Required("address", "body", m.Address); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentStatus) validateBook(formats strfmt.Registry) error {
	if swag.IsZero(m.Book) { // not required
		return nil
	}

	if m.Book != nil {
		if err := m.Book.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("book")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("book")
			}
			return err
		}
	}

	return nil
}

func (m *ExperimentStatus) validateJump(formats strfmt.Registry) error {

	if err := validate.Required("jump", "body", m.Jump); err != nil {
		return err
	}

	if m.Jump != nil {
		if err := m.Jump.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jump")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jump")
			}
			return err
		}
	}

	return nil
}

func (m *ExperimentStatus) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ExperimentStatus) validateRelay(formats strfmt.Registry) error {

	if err := validate.Required("relay", "body", m.Relay); err != nil {
		return err
	}

	for i := 0; i < len(m.Relay); i++ {
		if swag.IsZero(m.Relay[i]) { // not required
			continue
		}

		if m.Relay[i] != nil {
			if err := m.Relay[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relay" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relay" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExperimentStatus) validateTest(formats strfmt.Registry) error {
	if swag.IsZero(m.Test) { // not required
		return nil
	}

	if m.Test != nil {
		if err := m.Test.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this experiment status based on the context it is used
func (m *ExperimentStatus) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateBook(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateJump(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRelay(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTest(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ExperimentStatus) contextValidateBook(ctx context.Context, formats strfmt.Registry) error {

	if m.Book != nil {
		if err := m.Book.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("book")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("book")
			}
			return err
		}
	}

	return nil
}

func (m *ExperimentStatus) contextValidateJump(ctx context.Context, formats strfmt.Registry) error {

	if m.Jump != nil {
		if err := m.Jump.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("jump")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("jump")
			}
			return err
		}
	}

	return nil
}

func (m *ExperimentStatus) contextValidateRelay(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Relay); i++ {

		if m.Relay[i] != nil {
			if err := m.Relay[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("relay" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("relay" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ExperimentStatus) contextValidateTest(ctx context.Context, formats strfmt.Registry) error {

	if m.Test != nil {
		if err := m.Test.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("test")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("test")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ExperimentStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ExperimentStatus) UnmarshalBinary(b []byte) error {
	var res ExperimentStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
