// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StreamReport Status of a stream
//
// swagger:model StreamReport
type StreamReport struct {

	// can read
	CanRead bool `json:"can_read,omitempty"`

	// can write
	CanWrite bool `json:"can_write,omitempty"`

	// date and time connection made
	// Required: true
	Connected *string `json:"connected"`

	// expiry date and time in the token used to authenticate the connection
	// Required: true
	ExpiresAt *string `json:"expires_at"`

	// list of IP addresses for client (typically <client>, <proxy 1>, etc)
	RemoteAddr string `json:"remote_addr,omitempty"`

	// list of scopes supplied in token used to authenticate the connection
	// Required: true
	Scopes []string `json:"scopes"`

	// stats
	// Required: true
	Stats *RxTx `json:"stats"`

	// topic_stub for experiment e.g. pend00
	// Required: true
	Topic *string `json:"topic"`

	// what tool is user using to connect
	// Required: true
	UserAgent *string `json:"user_agent"`
}

// Validate validates this stream report
func (m *StreamReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnected(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScopes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStats(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTopic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserAgent(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamReport) validateConnected(formats strfmt.Registry) error {

	if err := validate.Required("connected", "body", m.Connected); err != nil {
		return err
	}

	return nil
}

func (m *StreamReport) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", m.ExpiresAt); err != nil {
		return err
	}

	return nil
}

func (m *StreamReport) validateScopes(formats strfmt.Registry) error {

	if err := validate.Required("scopes", "body", m.Scopes); err != nil {
		return err
	}

	return nil
}

func (m *StreamReport) validateStats(formats strfmt.Registry) error {

	if err := validate.Required("stats", "body", m.Stats); err != nil {
		return err
	}

	if m.Stats != nil {
		if err := m.Stats.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

func (m *StreamReport) validateTopic(formats strfmt.Registry) error {

	if err := validate.Required("topic", "body", m.Topic); err != nil {
		return err
	}

	return nil
}

func (m *StreamReport) validateUserAgent(formats strfmt.Registry) error {

	if err := validate.Required("user_agent", "body", m.UserAgent); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this stream report based on the context it is used
func (m *StreamReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateStats(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StreamReport) contextValidateStats(ctx context.Context, formats strfmt.Registry) error {

	if m.Stats != nil {
		if err := m.Stats.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stats")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("stats")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StreamReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StreamReport) UnmarshalBinary(b []byte) error {
	var res StreamReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
