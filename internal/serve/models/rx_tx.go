// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// RxTx receive and transmit statistics for a connection
//
// swagger:model RxTx
type RxTx struct {

	// rx
	Rx *Statistics `json:"rx,omitempty"`

	// tx
	Tx *Statistics `json:"tx,omitempty"`
}

// Validate validates this rx tx
func (m *RxTx) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateRx(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTx(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RxTx) validateRx(formats strfmt.Registry) error {
	if swag.IsZero(m.Rx) { // not required
		return nil
	}

	if m.Rx != nil {
		if err := m.Rx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rx")
			}
			return err
		}
	}

	return nil
}

func (m *RxTx) validateTx(formats strfmt.Registry) error {
	if swag.IsZero(m.Tx) { // not required
		return nil
	}

	if m.Tx != nil {
		if err := m.Tx.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this rx tx based on the context it is used
func (m *RxTx) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTx(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RxTx) contextValidateRx(ctx context.Context, formats strfmt.Registry) error {

	if m.Rx != nil {
		if err := m.Rx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("rx")
			}
			return err
		}
	}

	return nil
}

func (m *RxTx) contextValidateTx(ctx context.Context, formats strfmt.Registry) error {

	if m.Tx != nil {
		if err := m.Tx.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tx")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("tx")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RxTx) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RxTx) UnmarshalBinary(b []byte) error {
	var res RxTx
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
