// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// HealthEventsHandlerFunc turns a function with the right signature into a health events handler
type HealthEventsHandlerFunc func(HealthEventsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn HealthEventsHandlerFunc) Handle(params HealthEventsParams) middleware.Responder {
	return fn(params)
}

// HealthEventsHandler interface for that can handle valid health events params
type HealthEventsHandler interface {
	Handle(HealthEventsParams) middleware.Responder
}

// NewHealthEvents creates a new http.Handler for the health events operation
func NewHealthEvents(ctx *middleware.Context, handler HealthEventsHandler) *HealthEvents {
	return &HealthEvents{Context: ctx, Handler: handler}
}

/* HealthEvents swagger:route GET /experiments/events/{name} healthEvents

Get the health events for an experiment

Get a list of the health events recorded for an experiment

*/
type HealthEvents struct {
	Context *middleware.Context
	Handler HealthEventsHandler
}

func (o *HealthEvents) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewHealthEventsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
